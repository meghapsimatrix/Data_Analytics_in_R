---
title: "Data Visualization with `ggplot`"
author: "Megha Joshi"
execute: 
  echo: TRUE
format: 
  revealjs:
    theme: [../slides.scss]
    slide-number: c/t
    show-slide-number: all
    title-slide-attributes:
      data-background-color: "#562457"
    preview-links: true
    footer: |
      Theme by Beatriz Mills on  [GitHub](https://github.com/beatrizmilz/quarto-rladies-theme)
editor: visual
---

## Data Visualization

::: columns
::: {.column width="50%" layout="[[-1], [1], [-1]]"}
![](images/motivation.png)
:::

::: {.column width="40%"}
-   Exploration

    -   Look at distributions

    -   Examine relationship between variables

-   Communication

    -   Illustrate your findings in ways that are digestible

    -   Make or support an argument
:::
:::

## A Grammar of Graphics

-   Leland Wilkinson wrote [The Grammar of Graphics (2nd edition, 2005)](https://link.springer.com/book/10.1007/0-387-28695-0)

    -   Developed the grammar of graphics

    -   Described fundamental elements that make up a statistical graphic

-   Hadley Wickham created the R package `ggplot2` to create graphs based on Wilkinson's grammar of graphics (gg)

    -   Layers

## Loading `ggplot`

The `ggplot2` package is available as part of the `tidyverse` set of packages:

```{r}
library(tidyverse)
```

You can also load the package separately:

```{r}
library(ggplot2)
```

## Example Dataset {style=".smaller"}

```{r}
load("../../slides/data/bike_sharing_dat.RData")
glimpse(bike_sharing_dat)
```

# The Grammar {.inverse}

## The Grammar {.smaller}

::: columns
::: {.column width="50%"}
[![](images/Picture1.png)](https://ggplot2.tidyverse.org/articles/ggplot2.html)
:::

::: {.column width="50%" style="font-size: 120%;"}
"In brief, the grammar tells us that a graphic maps the data to the aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars)." - Hadley Wickham
:::
:::

## Data

-   **Data** - information used to create the graphic

```{r}
ggplot(data = bike_sharing_dat)
```

## Aesthetic Mappings

-   **Aesthetic attributes - x, y, color, size**

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season))
```

## Layers

-   **Geoms**- geometric representations of the data

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season)) + 
  geom_point()
```

## Scales

Scales - translate what is in the graph to what is in the data using legends or axes

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season)) + 
  geom_point() + 
  scale_color_brewer(palette = "Dark2")
```

## Facets

-   Facets - small multiples

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season)) + 
  geom_point() +
  facet_grid(~ season)
```

## Theme

Theme - set overall how the graph looks

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season)) + 
  geom_point() +
  facet_grid(~ season) + 
  theme_bw()
```

## Cleaning Up

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count, 
           color = season)) + 
  geom_point(alpha = .5) +
  facet_grid(~ season) + 
  scale_color_brewer(palette = "Dark2") +
  labs(x = "Temperature", y = "Total Rental Bikes", color = "Season") +
  theme_bw() + 
  guides(color = guide_legend(position = "bottom")) 
```

## Anatomy of a `ggplot`

```{r, eval = FALSE}
ggplot(data = [dat], # the data
       aes(x = [x_var], 
           y = [y_var],
           color = [color_var], 
           fill = [fill_var])) + # aesthetic mappings
  geom_[point]() + # geom
  geom_[smooth]() + # another layer
  scale_[aesthetic]_[type]() + # scaling
  facet_grid([row] ~ [col]) + # faceting
  theme_[theme]() # theme
```

# Working with One Variable {.inverse}

## Bar Plot: Categorical Data

```{r}
ggplot(bike_sharing_dat, aes(x = holiday, fill = holiday)) + 
  geom_bar() +
  theme_minimal()
```

## Histogram: Continuous Data

```{r}
ggplot(bike_sharing_dat, aes(x = temp)) + 
  geom_histogram(fill = "darkred", alpha = .8, bins = 15) +
  theme_grey()
```

## Density Plot: Continuous Data

```{r}
ggplot(bike_sharing_dat, aes(x = count)) +
  geom_density(alpha = .8, fill = "navy") + 
  theme(legend.position = "none") +
  theme_bw()
```

# Working with Two Variables {.inverse}

## Bar Plot: Categorical Data

```{r}
ggplot(bike_sharing_dat, aes(x = season, fill = weathersit)) +
  geom_bar(position = "fill") +
  theme_classic()
```

## Box Plot

```{r}
ggplot(bike_sharing_dat, 
       aes(x = weathersit, 
           y = count, 
           fill = weathersit)) +
  geom_boxplot(alpha = .7) +
  theme(legend.position = "none") +
  theme_linedraw()
```

## Scatter Plot: Continuous Data

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count)) + 
  geom_point(alpha = .7) + 
  theme_dark()
```

## Total Rentals by Season

```{r}
ggplot(bike_sharing_dat, aes(x = count, fill = season)) +
  geom_density(alpha = .8) + 
  theme_light() + 
  guides(fill = FALSE)
```

## Total Rentals by Season

```{r}
ggplot(bike_sharing_dat, aes(x = count, fill = season)) +
  geom_density(alpha = .8) + 
  facet_wrap(~ season) +
  theme_void() + 
  guides(fill = FALSE)
```

# Introducing More Variables

## Relationship Between Temperature and Total Rentals by Season and Weather and by Weekday and Holiday

```{r}
ggplot(bike_sharing_dat, 
       aes(x = temp, 
           y = count,
           color = weekday,
           shape = holiday)) + 
  geom_point(alpha = .7) + 
  facet_grid(weathersit ~ season) +
  theme_test()
```
